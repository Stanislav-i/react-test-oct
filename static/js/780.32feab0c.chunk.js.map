{"version":3,"file":"static/js/780.32feab0c.chunk.js","mappings":"+NAmBWA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,E,mBCoDpB,EAnEyB,WACvB,IAAMG,EAAeV,IACfW,EAAkBX,IAClBY,GAAWC,EAAAA,EAAAA,MAkBjB,OACE,0BACE,kBACEC,SAnBe,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACTC,EAAWF,EAAKG,SAASD,SAASE,MAClCC,EAAWL,EAAKG,SAASE,SAASD,MAExCT,GACEW,EAAAA,EAAAA,IAAe,CACbJ,SAAAA,EACAG,SAAAA,KAIJL,EAAKO,OACN,EAMKC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,IAAK,OACLC,eAAgB,SAChBC,WAAY,UAPhB,WAUE,kBAAOC,QAASrB,EAAhB,SAA8B,cAC9B,kBACEsB,KAAK,OACLC,KAAK,WACLC,MAAM,gCACN5B,GAAII,EACJyB,UAAQ,KAGV,kBAAOJ,QAASpB,EAAhB,SAAiC,cACjC,kBACEqB,KAAK,OACLC,KAAK,WACLC,MAAM,iCACN5B,GAAIK,EACJwB,UAAQ,KAGV,mBACEH,KAAK,SACLP,MAAO,CACLW,QAAS,WACTC,gBAAiB,qBACjBC,aAAc,MACdC,OAAQ,WANZ,SAQC,gBAMR,E,UChEYC,EAAW,WACtB,IAAMC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAI1B,OAFwBD,EAAAA,EAAAA,IAAYE,EAAAA,KAER,SAAC,KAAD,CAAUC,GAAG,cAEvC,iBACEpB,MAAO,CACLW,QAAS,WACTC,gBAAiB,qBACjBC,aAAc,OAJlB,WAOE,eACEb,MAAO,CACLqB,UAAW,UAFf,SAIC,YAGD,SAAC,EAAD,IACCL,IACC,gBACEhB,MAAO,CACLY,gBAAiB,mBACjBS,UAAW,SACXV,QAAS,OACTW,UAAW,QALf,UAQE,uBAAIN,QAKb,EAED,G","sources":["../node_modules/nanoid/index.browser.js","components/LoginForm/LoginForm.jsx","Pages/HomePage/HomePage.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { loginUserThunk } from 'redux/authReducer';\n\nexport const LoginForm = () => {\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const username = form.elements.username.value;\n    const password = form.elements.password.value;\n\n    dispatch(\n      loginUserThunk({\n        username,\n        password,\n      })\n    );\n\n    form.reset();\n  };\n\n  return (\n    <div>\n      <form\n        onSubmit={handleSubmit}\n        style={{\n          display: 'flex',\n          flexDirection: 'Column',\n          gap: '10px',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <label htmlFor={emailInputId}>Username</label>\n        <input\n          type=\"text\"\n          name=\"username\"\n          title=\"Valid name should be provided\"\n          id={emailInputId}\n          required\n        />\n\n        <label htmlFor={passwordInputId}>Password</label>\n        <input\n          type=\"text\"\n          name=\"password\"\n          title=\"Valid email should be provided\"\n          id={passwordInputId}\n          required\n        />\n\n        <button\n          type=\"submit\"\n          style={{\n            padding: '5px 20px',\n            backgroundColor: 'rgb(218, 118, 229)',\n            borderRadius: '5px',\n            cursor: 'pointer',\n          }}\n        >\n          Log In!\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\nimport { useSelector } from 'react-redux';\nimport { selectAuthentificated, selectLoginError } from 'redux/authReducer';\nimport { Navigate } from 'react-router-dom';\n\nexport const HomePage = () => {\n  const error = useSelector(selectLoginError);\n\n  const authintificated = useSelector(selectAuthentificated);\n\n  if (authintificated) return <Navigate to=\"/content\" />;\n  return (\n    <div\n      style={{\n        padding: '5px 20px',\n        backgroundColor: 'rgb(186, 164, 189)',\n        borderRadius: '5px',\n      }}\n    >\n      <h1\n        style={{\n          textAlign: 'center',\n        }}\n      >\n        LOG IN\n      </h1>\n      <LoginForm />\n      {error && (\n        <div\n          style={{\n            backgroundColor: 'rgb(218, 74, 64)',\n            textAlign: 'center',\n            padding: '10px',\n            marginTop: '10px',\n          }}\n        >\n          <p>{error}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","emailInputId","passwordInputId","dispatch","useDispatch","onSubmit","e","preventDefault","form","currentTarget","username","elements","value","password","loginUserThunk","reset","style","display","flexDirection","gap","justifyContent","alignItems","htmlFor","type","name","title","required","padding","backgroundColor","borderRadius","cursor","HomePage","error","useSelector","selectLoginError","selectAuthentificated","to","textAlign","marginTop"],"sourceRoot":""}