{"version":3,"file":"static/js/780.d42222f2.chunk.js","mappings":"8NAmBWA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,E,kBCwCpB,EAtDyB,WACvB,IAAMG,EAAeV,IACfW,EAAkBX,IAClBY,GAAWC,EAAAA,EAAAA,MAkBjB,OACE,0BACE,kBAAMC,SAlBW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACTC,EAAWF,EAAKG,SAASD,SAASE,MAClCC,EAAWL,EAAKG,SAASE,SAASD,MAExCT,GACEW,EAAAA,EAAAA,IAAe,CACbJ,SAAAA,EACAG,SAAAA,KAIJL,EAAKO,OACN,EAIG,WACE,kBAAOC,QAASf,EAAhB,SAA+B,cAG/B,kBACEgB,KAAK,OACLC,KAAK,WACLC,MAAM,gCACNtB,GAAII,EACJmB,UAAQ,KAGV,kBAAOJ,QAASd,EAAhB,SAAkC,cAGlC,kBACEe,KAAK,OACLC,KAAK,WACLC,MAAM,iCACNtB,GAAIK,EACJkB,UAAQ,KAGV,mBAAQH,KAAK,SAAb,SAAuB,gBAM9B,E,SCpDYI,EAAW,WAItB,OAFwBC,EAAAA,EAAAA,IAAYC,EAAAA,KAER,SAAC,KAAD,CAAUC,GAAG,cAErC,4BACE,uBAAG,SACH,SAAC,EAAD,MAGL,EAED,G","sources":["../node_modules/nanoid/index.browser.js","components/LoginForm/LoginForm.jsx","Pages/HomePage/HomePage.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { loginUserThunk } from 'redux/authReducer';\n\n\nexport const LoginForm = () => {\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const username = form.elements.username.value;\n    const password = form.elements.password.value;\n\n    dispatch(\n      loginUserThunk({\n        username,\n        password,\n      })\n    );\n\n    form.reset();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit} >\n        <label htmlFor={emailInputId} >\n          Username\n        </label>\n        <input\n          type=\"text\"\n          name=\"username\"\n          title=\"Valid name should be provided\"\n          id={emailInputId}\n          required\n        />\n\n        <label htmlFor={passwordInputId} >\n          Password\n        </label>\n        <input\n          type=\"text\"\n          name=\"password\"\n          title=\"Valid email should be provided\"\n          id={passwordInputId}\n          required\n        />\n\n        <button type=\"submit\" >\n          Log In!\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from \"components/LoginForm/LoginForm\";\nimport { useSelector } from 'react-redux';\nimport { selectAuthentificated } from 'redux/authReducer';\nimport { Navigate } from 'react-router-dom';\n\nexport const HomePage = () => {\n    \n  const authintificated = useSelector(selectAuthentificated);\n\n  if (authintificated) return <Navigate to=\"/content\" />;\n    return (\n      <div>\n        <p>Hi!</p>\n        <LoginForm />\n      </div>\n    )\n  };\n  \n  export default HomePage;"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","emailInputId","passwordInputId","dispatch","useDispatch","onSubmit","e","preventDefault","form","currentTarget","username","elements","value","password","loginUserThunk","reset","htmlFor","type","name","title","required","HomePage","useSelector","selectAuthentificated","to"],"sourceRoot":""}